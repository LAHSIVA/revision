'''
1.	Construct external symbol table from the object programs.

Example :
Input object programs

H_Prog1_001000_1E
D_A1_1010_A2_101C_A3_1020
R_B1_C1
T_...........................
M_.....................
E_001000

H_Prog2_001000_1E
D_B1_101A_B2_101D_B3_1024
R_A1_C3
T_...........................
M_.....................
E_001000

H_Prog3_001000_1E
D_C1_2000_C2_201C_C3_2021
R_A1_B1_B2
T_...........................
M_.....................
E_001000

External Symbol Table :

Symbol  Assembler   Address of  Runtime     Address of  Referred in
        Starting    Symbol      Starting    Symbol
        Address                 Address

A1	Program 1 1000	1010	Random address (eg. 6000)	6010	Program 2 and Program 3
A2		101C		601C
A3		1020		6020
B1	Program 2 1000	101A	Random address	-
B2		101D		-
B3		1024		-
C1	Program 3 1000	2000	Random address	-
C2		201C		-
C3		2021		-

'''

def eliminate(lines) :

    lines = [line.strip() for line in lines if line != '\n']
    return lines



def address(pStart, rStart, sAddress) :
    return hex(int(hex( int(sAddress, 16) - int(pStart, 16) )[2 : ], 16) + int(rStart, 16) )[2:]



def printTable(t) :
    for k, v in t.items() :
        print(k, v)



with open('/content/test.text') as file :
    lines = file.readlines()



lines = eliminate(lines)


n = len(lines)


start = '6000'


symbol = {}


table = {}

ref = {}


for i in range(0, n, 6) :

    name = lines[i].split('_')[1]

    startAddress = lines[i].split('_')[2][2 : ]

    variable = lines[i + 1].split('_')[1 : ]

    print("symbol is:",symbol)

    for j in range(0, len(variable), 2) :
        symbol[variable[j]] = [variable[j + 1], name, startAddress]

    r = lines[i + 2].split('_')[1 : ]

    for sym in r :
        if sym not in ref :
            ref[sym] = [name]
        else :
            ref[sym] += [name]


print("ref is:",ref)

for k, v in symbol.items() :
    table[k] = [v[2], v[0], start, address(v[2], start, v[0])]

    if k in ref :
        table[k] += ref[k]

print('\nTable :\n')
printTable(table)
print()
